<?xml version="1.0" encoding="utf-8" ?>
<configuration>
  <configSections>
    <sectionGroup name="applicationSettings" type="System.Configuration.ApplicationSettingsGroup, System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" >
      <section name="BridgeDetectSystem.Properties.Settings" type="System.Configuration.ClientSettingsSection, System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" requirePermission="false" />
    </sectionGroup>
    <section name="log4net" type="log4net.Config.Log4NetConfigurationSectionHandler, log4net"/>
  </configSections>
  <applicationSettings>
    <BridgeDetectSystem.Properties.Settings>
      <setting name="DataBaseConnection" serializeAs="String">
        <value>server=localhost\SQLEXPRESS;database=BridgeDetect;Integrated Security=True;</value>
      </setting>
    </BridgeDetectSystem.Properties.Settings>
  </applicationSettings>
  <log4net>
    <root>
      <level value="ALL" />
      <appender-ref ref="LogFileAppender" />
    </root>
    <!--定义输出到文件-->
    <appender name="LogFileAppender" type="log4net.Appender.RollingFileAppender">
      <!--定义文件存放位置-->
      <file value="..\Log\"/>
      <appendToFile value="true"/>
      <rollingStyle value="Date"/>
      <datePattern value="yyyyMM\\yyyyMMdd'.txt'"/>
      <staticLogFileName value="false"/>
      <param name="MaxSizeRollBackups" value="100"/>
      <layout type="log4net.Layout.PatternLayout">
        <conversionPattern value="活动:%c || 记录时间：%date || 日志级别： %-5level %n描述： %message%newline%n"/>
      </layout>
    </appender>
  </log4net>
</configuration>


<!--%m(message):输出的日志消息；
%n(newline):换行；
%d(datetime):输出当前语句运行的时刻；
%r(runtime):输出程序从运行到执行到当前语句时消耗的毫秒数；
%t(threadid):当前语句所在的线程ID ；
%p(priority): 日志的当前日志级别；
%c(class):当前日志对象的名称；
%L：输出语句所在的行号；
%F：输出语句所在的文件名；
%-10：表示最小长度为10，如果不够，则用空格填充；-->

<!-- 
      Level有以下几种取值
      
级别     允许的方法           Boolean属性            ||  优先级别  
===========================================================
OFF                                               ||   Highest    

FATAL  void Fatal(...);    bool IsFatalEnabled;   ||  致命

ERROR   void Error(...);    bool IsErrorEnabled;   ||  错误

WARN    void Warn(...);    bool IsWarnEnabled;    ||  警告

INFO     void Info(...);    bool IsInfoEnabled;   ||  信息

DEBUG    void Debug(...);   bool IsDebugEnabled;  ||  调试

ALL                                               ||   Lowest
-->